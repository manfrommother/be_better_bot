from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime

from src.models.workout import Exercise
from src.models.analytics import ActivityType

workout_router = Router()

class ExerciseStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    entering_name = State()      # –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    entering_weight = State()    # –í–≤–æ–¥ –≤–µ—Å–∞
    entering_reps = State()      # –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    entering_sets = State()      # –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥—Ö–æ–¥–æ–≤

@workout_router.message(Command("workout"))
async def cmd_workout(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úèÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="workout:add"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="workout:stats")
        ],
        [
            InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="workout:history")
        ]
    ])
    await message.answer(
        "üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@workout_router.callback_query(F.data == "workout:add")
async def start_exercise_record(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ñ–∏–º –ª–µ–∂–∞, –ü—Ä–∏—Å–µ–¥, –°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞"
    )
    await state.set_state(ExerciseStates.entering_name)

@workout_router.message(ExerciseStates.entering_name)
async def process_exercise_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    await state.update_data(exercise_name=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 60.5"
    )
    await state.set_state(ExerciseStates.entering_weight)

@workout_router.message(ExerciseStates.entering_weight)
async def process_weight(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–µ—Å–∞"""
    try:
        weight = float(message.text.replace(',', '.'))
        await state.update_data(weight=weight)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ –ø–æ–¥—Ö–æ–¥–µ:"
        )
        await state.set_state(ExerciseStates.entering_reps)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å:")

@workout_router.message(ExerciseStates.entering_reps)
async def process_reps(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
    try:
        reps = int(message.text)
        await state.update_data(reps=reps)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤:"
        )
        await state.set_state(ExerciseStates.entering_sets)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")

@workout_router.message(ExerciseStates.entering_sets)
async def process_sets(
    message: Message, 
    state: FSMContext, 
    exercise_service,
    analytics_service
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥—Ö–æ–¥–æ–≤"""
    try:
        sets = int(message.text)
        data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏
        exercise = await exercise_service.add_exercise(
            user_id=message.from_user.id,
            name=data['exercise_name'],
            weight=data['weight'],
            reps=data['reps'],
            sets=sets,
            workout_date=datetime.utcnow()
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        await analytics_service.log_activity(
            user_id=message.from_user.id,
            action=ActivityType.WORKOUT_RECORDED,
            metadata={
                'exercise': data['exercise_name'],
                'weight': data['weight'],
                'reps': data['reps'],
                'sets': sets
            }
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —ç—Ç–æ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
        stats = await exercise_service.get_exercise_stats(
            user_id=message.from_user.id,
            exercise_name=data['exercise_name']
        )
        
        response = (
            f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ!\n\n"
            f"üèãÔ∏è‚Äç‚ôÇÔ∏è {data['exercise_name']}\n"
            f"‚öñÔ∏è –í–µ—Å: {data['weight']} –∫–≥\n"
            f"üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {data['reps']}\n"
            f"üìä –ü–æ–¥—Ö–æ–¥–æ–≤: {sets}\n\n"
        )
        
        if stats['prev_weight']:
            weight_diff = data['weight'] - stats['prev_weight']
            response += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞: {weight_diff:+.1f} –∫–≥\n"
        
        if stats['max_weight']:
            response += f"–í–∞—à —Ä–µ–∫–æ—Ä–¥: {stats['max_weight']} –∫–≥\n"
        
        await message.answer(response)
        await state.clear()
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")

@workout_router.callback_query(F.data == "workout:stats")
async def show_workout_stats(callback: CallbackQuery, exercise_service):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    stats = await exercise_service.get_user_stats(callback.from_user.id)
    
    response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n\n"
    
    if stats['recent_exercises']:
        response += "üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n"
        for exercise in stats['recent_exercises']:
            response += (
                f"‚Ä¢ {exercise.name}: "
                f"{exercise.weight} –∫–≥ √ó "
                f"{exercise.reps} √ó "
                f"{exercise.sets}\n"
            )
    
    if stats['max_weights']:
        response += "\nüí™ –†–µ–∫–æ—Ä–¥—ã:\n"
        for exercise_name, weight in stats['max_weights'].items():
            response += f"‚Ä¢ {exercise_name}: {weight} –∫–≥\n"
    
    await callback.message.edit_text(
        response,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="workout:back")
        ]])
    )

@workout_router.callback_query(F.data == "workout:history")
async def show_workout_history(callback: CallbackQuery, exercise_service):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    exercises = await exercise_service.get_user_history(
        user_id=callback.from_user.id,
        limit=10
    )
    
    response = "üìã –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n\n"
    
    current_date = None
    for exercise in exercises:
        exercise_date = exercise.workout_date.strftime("%d.%m.%Y")
        
        if exercise_date != current_date:
            response += f"\nüìÖ {exercise_date}\n"
            current_date = exercise_date
        
        response += (
            f"‚Ä¢ {exercise.name}: "
            f"{exercise.weight} –∫–≥ √ó "
            f"{exercise.reps} √ó "
            f"{exercise.sets}\n"
        )
    
    await callback.message.edit_text(
        response,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="workout:back")
        ]])
    )

@workout_router.callback_query(F.data == "workout:back")
async def workout_back(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    await cmd_workout(callback.message)
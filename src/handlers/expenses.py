# handlers/expenses.py
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
from decimal import Decimal

from models.expenses import CategoryType
from models.savings import RoundingStep
from services.expenses import ExpensesService
from services.analytics import AnalyticsService, ActivityType


expenses_router = Router()


class TransactionStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    choosing_type = State()        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)
    choosing_category = State()    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    entering_amount = State()      # –í–≤–æ–¥ —Å—É–º–º—ã
    entering_description = State() # –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

class CategoryStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    choosing_type = State()    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)
    entering_name = State()    # –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

@expenses_router.message(Command("add"))
async def cmd_add_transaction(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí∞ –î–æ—Ö–æ–¥", callback_data="trans_type:income"),
            InlineKeyboardButton(text="üí∏ –†–∞—Å—Ö–æ–¥", callback_data="trans_type:expense")
        ]
    ])
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
        reply_markup=keyboard
    )

@expenses_router.callback_query(F.data.startswith("trans_type:"))
async def transaction_type_selected(callback: CallbackQuery, state: FSMContext, expenses_service: ExpensesService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    trans_type = callback.data.split(":")[1]
    await state.update_data(transaction_type=trans_type)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    categories = await expenses_service.get_user_categories(
        callback.from_user.id,
        CategoryType[trans_type.upper()]
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat.name, callback_data=f"cat:{cat.id}")]
        for cat in categories
    ] + [[InlineKeyboardButton(text="‚ûï –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="new_category")]])
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard
    )
    await state.set_state(TransactionStates.choosing_category)

@expenses_router.callback_query(TransactionStates.choosing_category)
async def category_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if callback.data == "new_category":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üí∞ –î–æ—Ö–æ–¥", callback_data="cat_type:income"),
                InlineKeyboardButton(text="üí∏ –†–∞—Å—Ö–æ–¥", callback_data="cat_type:expense")
            ]
        ])
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=keyboard
        )
        await state.set_state(CategoryStates.choosing_type)
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_id = int(callback.data.split(":")[1])
        await state.update_data(category_id=category_id)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        await state.set_state(TransactionStates.entering_amount)

@expenses_router.message(TransactionStates.entering_amount)
async def process_amount(message: Message, state: FSMContext, expenses_service: ExpensesService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
    try:
        amount = Decimal(message.text.replace(',', '.'))
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        user_settings = await expenses_service.get_user_settings(message.from_user.id)
        
        if user_settings and user_settings.savings_enabled:
            total, savings = expenses_service.calculate_rounding_amount(
                amount,
                user_settings.rounding_step
            )
            await message.answer(
                f"üí∞ –°—É–º–º–∞: {amount} ‚ÇΩ\n"
                f"üîÑ –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ: +{savings} ‚ÇΩ\n"
                f"üí≥ –ò—Ç–æ–≥–æ: {total} ‚ÇΩ\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
            )
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        
        await state.update_data(amount=amount)
        await state.set_state(TransactionStates.entering_description)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")

@expenses_router.message(TransactionStates.entering_description)
async def process_description(
    message: Message,
    state: FSMContext,
    expenses_service: ExpensesService,
    analytics_service: AnalyticsService
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    if message.text == "/skip":
        description = None
    else:
        description = message.text

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    transaction, savings = await expenses_service.create_transaction(
        user_id=message.from_user.id,
        category_id=data['category_id'],
        amount=data['amount'],
        description=description
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    await analytics_service.log_activity(
        user_id=message.from_user.id,
        action=ActivityType.EXPENSE_ADDED if data['transaction_type'] == 'expense' 
              else ActivityType.INCOME_ADDED,
        metadata={
            'amount': str(data['amount']),
            'category_id': data['category_id'],
            'savings': str(savings) if savings else None
        }
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    response = f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
    response += f"{'–†–∞—Å—Ö–æ–¥' if data['transaction_type'] == 'expense' else '–î–æ—Ö–æ–¥'}: {data['amount']} ‚ÇΩ\n"
    if description:
        response += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
    if savings:
        response += f"üí∞ –ù–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á—ë—Ç: {savings} ‚ÇΩ\n"

    await message.answer(response)
    await state.clear()

@expenses_router.message(Command("categories"))
async def cmd_categories(message: Message, expenses_service: ExpensesService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    income_categories = await expenses_service.get_user_categories(
        message.from_user.id,
        CategoryType.INCOME
    )
    expense_categories = await expenses_service.get_user_categories(
        message.from_user.id,
        CategoryType.EXPENSE
    )
    
    response = "üìã –í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
    
    if income_categories:
        response += "üí∞ –î–æ—Ö–æ–¥—ã:\n"
        for cat in income_categories:
            response += f"‚Ä¢ {cat.name}\n"
        response += "\n"
    
    if expense_categories:
        response += "üí∏ –†–∞—Å—Ö–æ–¥—ã:\n"
        for cat in expense_categories:
            response += f"‚Ä¢ {cat.name}\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")
    ]])
    
    await message.answer(response, reply_markup=keyboard)

@expenses_router.message(Command("balance"))
async def cmd_balance(message: Message, expenses_service: ExpensesService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    start_date = datetime.utcnow().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    balance = await expenses_service.get_balance(
        message.from_user.id,
        start_date=start_date
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞
    savings = await expenses_service.get_savings_balance(message.from_user.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = "üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n\n"
    response += f"–î–æ—Ö–æ–¥—ã: {balance['income']:,.2f} ‚ÇΩ\n"
    response += f"–†–∞—Å—Ö–æ–¥—ã: {balance['expenses']:,.2f} ‚ÇΩ\n"
    response += f"–ë–∞–ª–∞–Ω—Å: {balance['balance']:+,.2f} ‚ÇΩ\n"
    
    if savings > 0:
        response += f"\nüè¶ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á—ë—Ç: {savings:,.2f} ‚ÇΩ"
    
    await message.answer(response)

@expenses_router.callback_query(F.data == "add_category")
async def start_category_creation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí∞ –î–æ—Ö–æ–¥", callback_data="cat_type:income"),
            InlineKeyboardButton(text="üí∏ –†–∞—Å—Ö–æ–¥", callback_data="cat_type:expense")
        ]
    ])
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=keyboard
    )
    await state.set_state(CategoryStates.choosing_type)

@expenses_router.message(Command("settings"))
async def cmd_settings(message: Message, expenses_service: ExpensesService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    settings = await expenses_service.get_user_settings(message.from_user.id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="10 ‚ÇΩ", callback_data="round:10"),
            InlineKeyboardButton(text="50 ‚ÇΩ", callback_data="round:50"),
            InlineKeyboardButton(text="100 ‚ÇΩ", callback_data="round:100")
        ],
        [
            InlineKeyboardButton(
                text="‚úÖ –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ" if settings.savings_enabled else "‚ùå –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ", 
                callback_data="round:toggle"
            )
        ]
    ])
    
    current_step = settings.rounding_step.value if settings.savings_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω–æ"
    
    await message.answer(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è\n\n"
        f"–¢–µ–∫—É—â–∏–π —à–∞–≥ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è: {current_step} ‚ÇΩ\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —à–∞–≥ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ/–≤—ã–∫–ª—é—á–∏—Ç–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )

@expenses_router.callback_query(F.data.startswith("round:"))
async def process_rounding_setting(callback: CallbackQuery, expenses_service: ExpensesService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è"""
    action = callback.data.split(":")[1]
    
    if action == "toggle":
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        settings = await expenses_service.get_user_settings(callback.from_user.id)
        await expenses_service.update_settings(
            user_id=callback.from_user.id,
            savings_enabled=not settings.savings_enabled
        )
        await cmd_settings(callback.message, expenses_service)
    else:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —à–∞–≥ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        step = RoundingStep[f"STEP_{action}"]
        await expenses_service.update_settings(
            user_id=callback.from_user.id,
            rounding_step=step,
            savings_enabled=True
        )
        await callback.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ {action} ‚ÇΩ")
        await cmd_settings(callback.message, expenses_service)

# –î–æ–±–∞–≤–∏–º –ø—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
@expenses_router.message(Command("calc"))
async def cmd_calc_rounding(message: Message, expenses_service: ExpensesService):
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è"""
    args = message.text.split()
    if len(args) != 2:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫:\n"
            "/calc <—Å—É–º–º–∞>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /calc 156.70"
        )
        return

    try:
        amount = Decimal(args[1].replace(',', '.'))
        settings = await expenses_service.get_user_settings(message.from_user.id)
        
        if not settings.savings_enabled:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –æ—Ç–∫–ª—é—á–µ–Ω–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ.\n"
                "–í–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: /settings"
            )
            return

        total, savings = expenses_service.calculate_rounding_amount(
            amount,
            settings.rounding_step
        )
        
        await message.answer(
            f"üí∞ –°—É–º–º–∞: {amount} ‚ÇΩ\n"
            f"üîÑ –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ: +{savings} ‚ÇΩ\n"
            f"üí≥ –ò—Ç–æ–≥–æ –∫ —Å–ø–∏—Å–∞–Ω–∏—é: {total} ‚ÇΩ\n"
            f"üí∞ –ù–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á—ë—Ç: {savings} ‚ÇΩ"
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
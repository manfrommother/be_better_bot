from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


goals_router = Router()


class GoalCreation(StatesGroup):
    '''–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–µ–π'''
    choosing_type = State() # –¢–∏–ø —Ü–µ–ª–∏
    entering_title = State() # –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è
    entering_target = State() # –í–≤–æ–¥ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    entering_deadline = State() # –í–≤–æ–¥ –¥–µ–¥–ª–∞–π–Ω–∞
    entering_description = State() # –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

@goals_router.message(Command('new_goal'))
async def cmd_new_goal(message: Message, state: FSMContext):
    '''–û–±—Ä–∞–±–æ—á—Ç–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏'''
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí∞ –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ", callback_data="goal_type:savings"),
            InlineKeyboardButton(text="‚öñÔ∏è –í–µ—Å", callback_data="goal_type:weight")
        ]
    ])
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ü–µ–ª–∏:',
        reply_markup=keyboard
    )
    await state.set_state(GoalCreation.choosing_type)

@goals_router.callback_query(F.data.startswith('goal_type:'))
async def goal_type_selected(callback: CallbackQuery, state: FSMContext):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ü–µ–ª–∏'''
    goal_type = callback.data.split(':')[1]
    await state.update_data(goal_type=goal_type)

    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏:')
    await state.set_state(GoalCreation.entering_title)

@goals_router.message(GoalCreation.entering_title)
async def goal_title_entered(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–∏"""
    await state.update_data(title=message.text)
    
    goal_data = await state.get_data()
    if goal_data['goal_type'] == 'savings':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å (–≤ —Ä—É–±–ª—è—Ö):")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å (–≤ –∫–≥):")
    
    await state.set_state(GoalCreation.entering_target)

@goals_router.message(GoalCreation.entering_target)
async def goal_target_entered(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
    try:
        target_value = float(message.text)
        await state.update_data(target_value=target_value)
        
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
        )
        await state.set_state(GoalCreation.entering_deadline)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
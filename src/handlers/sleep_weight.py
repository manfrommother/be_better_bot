from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, time, timedelta
import re


sleep_weight_router = Router()


class WeightRecordStates(StatesGroup):
    '''–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞'''
    entering_weight = State()

class SleepRecordStates(StatesGroup):
    entering_sleep_time = State()
    entering_wake_time = State()

@sleep_weight_router.message(Command('weight'))
async def cmd_weight(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 75.5):"
    )
    await state.set_state(WeightRecordStates.entering_weight)

@sleep_weight_router.message(WeightRecordStates.entering_weight)
async def process_weight(message: Message, state: FSMContext, sleep_weight_service):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–µ—Å–∞"""
    try:
        weight = float(message.text.replace(',', '.'))
        if weight < 30 or weight > 250:
            raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 30 –¥–æ 250 –∫–≥")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–µ—Å
        record = await sleep_weight_service.add_weight_record(
            message.from_user.id,
            weight
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        stats = await sleep_weight_service.get_weight_stats(message.from_user.id)
        
        response = f"‚úÖ –í–µ—Å {weight} –∫–≥ –∑–∞–ø–∏—Å–∞–Ω!\n\n"
        
        if stats['previous_weight']:
            change = weight - stats['previous_weight']
            response += f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—à–ª–æ–≥–æ —Ä–∞–∑–∞: {change:+.1f} –∫–≥\n"
        
        if stats['week_start_weight']:
            week_change = weight - stats['week_start_weight']
            response += f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é: {week_change:+.1f} –∫–≥\n"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–ª—å –ø–æ –≤–µ—Å—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        goal = await sleep_weight_service.get_active_weight_goal(message.from_user.id)
        if goal:
            total_change = weight - goal.start_value
            needed_change = goal.target_value - goal.start_value
            progress = (total_change / needed_change) * 100 if needed_change != 0 else 0
            
            response += f"\nüéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏ ({goal.target_value} –∫–≥):\n"
            response += f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {abs(progress):.1f}%\n"
            response += f"–û—Å—Ç–∞–ª–æ—Å—å: {abs(goal.target_value - weight):.1f} –∫–≥"
        
        await message.answer(response)
        await state.clear()
        
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞:")

@sleep_weight_router.message(Command("sleep"))
async def cmd_sleep(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å–∏ —Å–Ω–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üåô –ò–¥—É —Å–ø–∞—Ç—å", callback_data="sleep:start"),
            InlineKeyboardButton(text="‚òÄÔ∏è –ü—Ä–æ—Å–Ω—É–ª—Å—è", callback_data="sleep:end")
        ],
        [
            InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="sleep:manual")
        ]
    ])
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@sleep_weight_router.callback_query(F.data.startswith("sleep:"))
async def process_sleep_action(callback: CallbackQuery, state: FSMContext, sleep_weight_service):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–ø–∏—Å—å—é —Å–Ω–∞"""
    action = callback.data.split(":")[1]
    
    if action == "start":
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–Ω–∞
        await sleep_weight_service.start_sleep_tracking(callback.from_user.id)
        await callback.message.edit_text(
            "üåô –î–æ–±—Ä–æ–π –Ω–æ—á–∏! –í—Ä–µ–º—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω–æ.\n"
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /sleep"
        )
    
    elif action == "end":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–Ω–∞
        sleep_record = await sleep_weight_service.end_sleep_tracking(callback.from_user.id)
        if sleep_record:
            duration = sleep_record.wake_time - sleep_record.sleep_time
            hours = duration.total_seconds() / 3600
            
            stats = await sleep_weight_service.get_sleep_stats(callback.from_user.id)
            
            response = (
                f"‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞: {hours:.1f} —á–∞—Å–æ–≤\n"
            )
            
            if stats['avg_duration']:
                response += f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['avg_duration']:.1f} —á–∞—Å–æ–≤\n"
            
            if stats['optimal_duration']:
                if hours < stats['optimal_duration']:
                    response += f"\n‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –≤—ã —Å–ø–∞–ª–∏ –º–µ–Ω—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ –Ω–∞ {stats['optimal_duration'] - hours:.1f} —á–∞—Å–æ–≤"
                elif hours > stats['optimal_duration'] + 2:
                    response += f"\nüò¥ –°–µ–≥–æ–¥–Ω—è –≤—ã —Å–ø–∞–ª–∏ –±–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ –Ω–∞ {hours - stats['optimal_duration']:.1f} —á–∞—Å–æ–≤"
            
            await callback.message.edit_text(response)
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞—Å—ã–ø–∞–Ω–∏—è.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ó–∞–ø–∏—Å–∞—Ç—å –≤—Ä—É—á–Ω—É—é' –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Å–Ω–µ."
            )
    
    elif action == "manual":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 23:30"
        )
        await state.set_state(SleepRecordStates.entering_sleep_time)

@sleep_weight_router.message(SleepRecordStates.entering_sleep_time)
async def process_sleep_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞—Å—ã–ø–∞–Ω–∏—è"""
    if not re.match(r'^([01]\d|2[0-3]):([0-5]\d)$', message.text):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23:30):"
        )
        return
    
    await state.update_data(sleep_time=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 07:30"
    )
    await state.set_state(SleepRecordStates.entering_wake_time)
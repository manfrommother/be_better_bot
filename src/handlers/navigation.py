from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from datetime import datetime, timedelta

from utils.keyboards import KeyboardFactory
from services.expenses import ExpensesService
from services.sleep_weight import SleepWeightService
from services.goals import GoalService
from services.analytics import AnalyticsService, ActivityType

navigation_router = Router()

@navigation_router.message(Command("start"))
async def cmd_start(message: Message, analytics_service: AnalyticsService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
        "‚Ä¢ üí∞ –í–µ—Å—Ç–∏ —É—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤\n"
        "‚Ä¢ ‚öñÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–µ—Å –∏ —Ä–µ–∂–∏–º —Å–Ω–∞\n"
        "‚Ä¢ üèãÔ∏è‚Äç‚ôÇÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "‚Ä¢ üéØ –î–æ—Å—Ç–∏–≥–∞—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π\n"
        "‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é:",
        reply_markup=KeyboardFactory.get_main_menu()
    )
    
    await analytics_service.log_activity(
        user_id=message.from_user.id,
        action=ActivityType.BOT_STARTED
    )

@navigation_router.message(Command("menu"))
async def cmd_menu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=KeyboardFactory.get_main_menu()
    )

@navigation_router.callback_query(F.data.startswith("menu:"))
async def process_menu_navigation(
    callback: CallbackQuery,
    expenses_service: ExpensesService,
    sleep_weight_service: SleepWeightService,
    goals_service: GoalService
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é"""
    section = callback.data.split(":")[1]
    
    if section == "main":
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=KeyboardFactory.get_main_menu()
        )
    
    elif section == "finances":
        await callback.message.edit_text(
            "üí∞ –§–∏–Ω–∞–Ω—Å—ã\n\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –±–∞–ª–∞–Ω—Å\n"
            "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è",
            reply_markup=KeyboardFactory.get_finances_menu()
        )
    
    elif section == "health":
        await callback.message.edit_text(
            "‚öñÔ∏è –í–µ—Å –∏ —Å–æ–Ω\n\n"
            "‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–µ—Å–∞\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ä–µ–∂–∏–º —Å–Ω–∞\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É",
            reply_markup=KeyboardFactory.get_health_menu()
        )
    
    elif section == "workout":
        await callback.message.edit_text(
            "üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n"
            "‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º\n"
            "‚Ä¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ —Ä–µ–∫–æ—Ä–¥—ã",
            reply_markup=KeyboardFactory.get_workout_menu()
        )
    
    elif section == "goals":
        await callback.message.edit_text(
            "üéØ –¶–µ–ª–∏\n\n"
            "‚Ä¢ –°—Ç–∞–≤—å—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
            "‚Ä¢ –î–æ—Å—Ç–∏–≥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            reply_markup=KeyboardFactory.get_goals_menu()
        )
    
    elif section == "stats":
        stats = await get_user_statistics(
            callback.from_user.id,
            expenses_service,
            sleep_weight_service,
            goals_service
        )
        await callback.message.edit_text(
            stats,
            reply_markup=KeyboardFactory.get_main_menu()
        )
    
    elif section == "settings":
        await callback.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–æ–≤\n"
            "‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
            reply_markup=KeyboardFactory.get_settings_menu()
        )

async def get_user_statistics(
    user_id: int,
    expenses_service: ExpensesService,
    sleep_weight_service: SleepWeightService,
    goals_service: GoalService
) -> str:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    expenses_stats = await expenses_service.get_balance(user_id)
    weight_stats = await sleep_weight_service.get_weight_stats(user_id)
    sleep_stats = await sleep_weight_service.get_sleep_stats(user_id)
    goals = await goals_service.get_user_goals(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    
    # –§–∏–Ω–∞–Ω—Å—ã
    stats += "üí∞ –§–∏–Ω–∞–Ω—Å—ã (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü):\n"
    stats += f"‚Ä¢ –î–æ—Ö–æ–¥—ã: {expenses_stats['income']:,.2f} ‚ÇΩ\n"
    stats += f"‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: {expenses_stats['expenses']:,.2f} ‚ÇΩ\n"
    stats += f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: {expenses_stats['balance']:+,.2f} ‚ÇΩ\n\n"
    
    # –í–µ—Å
    if weight_stats['current_weight']:
        stats += "‚öñÔ∏è –í–µ—Å:\n"
        stats += f"‚Ä¢ –¢–µ–∫—É—â–∏–π: {weight_stats['current_weight']} –∫–≥\n"
        if weight_stats['week_start_weight']:
            change = weight_stats['current_weight'] - weight_stats['week_start_weight']
            stats += f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é: {change:+.1f} –∫–≥\n\n"
    
    # –°–æ–Ω
    if sleep_stats['avg_duration']:
        stats += "üò¥ –°–æ–Ω:\n"
        stats += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {sleep_stats['avg_duration']:.1f} —á\n"
        stats += f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {sleep_stats['records_count']}\n\n"
    
    # –¶–µ–ª–∏
    if goals:
        stats += "üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏:\n"
        for goal in goals:
            progress = (goal.current_value - goal.start_value) / \
                      (goal.target_value - goal.start_value) * 100
            stats += f"‚Ä¢ {goal.title}: {abs(progress):.1f}%\n"
    
    return stats
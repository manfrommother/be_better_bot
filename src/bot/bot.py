from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.redis import RedisStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, time

from services.database import DatabaseService
from services.analytics import AnalyticsService
from services.goals import GoalService
from handlers.goals import goals_router
from handlers.expenses import expenses_router
import logging


class FinanceTrackerBot:
    '''–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞'''
    def __init__(self, token: str, db_url: str):
        self.bot = Bot(token=token)
        self.storage = RedisStorage.from_url('redis://localhost:6379/0')
        self.dp = Dispatcher(storage=self.storage)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.db = DatabaseService(db_url)
        self.analytics = AnalyticsService(self.db)
        self.goals = GoalService(self.db)

        #–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.scheduler = AsyncIOScheduler()

        #–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)

    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
        self.dp.include_router(goals_router)
        self.dp.include_router(expenses_router)
        self.dp.include_router(workout_router)
        self.dp.include_router(sleep_weight_router)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
        self._setup_scheduler()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –ë–î, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        self.db.create_tables()
        
        self.logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    def _setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å—É–±–±–æ—Ç–∞–º –≤ 10:00
        self.scheduler.add_job(
            self._send_weekly_report,
            trigger='cron',
            day_of_week='sat',
            hour=10,
            minute=0
        )
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
        self.scheduler.add_job(
            self.goals.check_overdue_goals,
            trigger='cron',
            hour=0,
            minute=0
        )
        
        self.scheduler.start()

    async def _send_weekly_report(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        users = await self._get_active_users()
        for user_id in users:
            try:
                report = await self._generate_weekly_report(user_id)
                await self.bot.send_message(user_id, report)
                await self.analytics.collect_user_activity(user_id, "weekly_report_sent")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    async def _generate_weekly_report(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é
        sleep_stats = await self._get_sleep_stats(user_id)
        weight_stats = await self._get_weight_stats(user_id)
        finance_stats = await self._get_finance_stats(user_id)
        goals_progress = await self._get_goals_progress(user_id)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = "üìä –í–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:\n\n"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–Ω–µ
        report += f"üò¥ –°–æ–Ω:\n"
        report += f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–Ω–∞: {sleep_stats['average_duration']:.1f} —á–∞—Å–æ–≤\n\n"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Å–µ
        if weight_stats['has_records']:
            report += f"‚öñÔ∏è –í–µ—Å:\n"
            report += f"–ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏: {weight_stats['start_weight']} –∫–≥\n"
            report += f"–ö–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏: {weight_stats['end_weight']} –∫–≥\n"
            report += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {weight_stats['change']:+.1f} –∫–≥\n\n"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        report += f"üí∞ –§–∏–Ω–∞–Ω—Å—ã:\n"
        report += f"–î–æ—Ö–æ–¥—ã: {finance_stats['income']:,.2f} ‚ÇΩ\n"
        report += f"–†–∞—Å—Ö–æ–¥—ã: {finance_stats['expenses']:,.2f} ‚ÇΩ\n"
        report += f"–ë–∞–ª–∞–Ω—Å: {finance_stats['balance']:+,.2f} ‚ÇΩ\n\n"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª—è—Ö
        if goals_progress:
            report += "üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª—è–º:\n"
            for goal in goals_progress:
                progress = (goal.current_value - goal.start_value) / (goal.target_value - goal.start_value) * 100
                report += f"{goal.title}: {progress:.1f}%\n"
        
        return report

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.setup()
        try:
            await self.dp.start_polling(self.bot)
        finally:
            await self.bot.session.close()
